import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Scanner;

class Person implements Serializable {
	String name;
	String phoneNumber;
	LocalDate dob;
	String emailAddress;

	/**
	 * @param name
	 * @param phoneNumber
	 * @param dob
	 * @param emailAddress
	 */
	public Person(String name, String phoneNumber, LocalDate dob, String emailAddress) {
		this.name = name;
		this.phoneNumber = phoneNumber;
		this.dob = dob;
		this.emailAddress = emailAddress;
	}

	@Override
	public String toString() {
		return "Person [Name=" + name + ", Phone Number=" + phoneNumber + ", Email Address=" + emailAddress
				+ ", Date of Birth=" + dob + "]";
	}

}

public class Test {

	public static void main(String[] args) {
		String menu = "\n***** MENU ***** \n" + " 1) Add information into a file.\n"
				+ " 2) Retrieve information from a file and display them.\n" + " 3) Delete information.\n"
				+ " 4) Update information.\n" + " 5) Exit.\n" + "Enter a choice: ";

		Scanner sc = new Scanner(System.in);
		int choice = 0;

		ArrayList<Person> persons;
		Person person;
		try {
			ObjectOutputStream objOut = new ObjectOutputStream(new FileOutputStream("Persons.bin"));

			do {
				System.out.print(menu);
				choice = sc.nextInt();
				switch (choice) {
				case 1:
					objOut.writeObject(inputPerson(sc));
					System.out.println("A person added successfully.");
					break;
				case 2:
					persons = readFile();
					displayPersons(persons);
					System.out.println("Total objects read: " + persons.size());
					break;
				case 3:
					persons = readFile();
					displayPersons(persons);
					System.out.print("Choose an object to delete: ");
					person = persons.remove(sc.nextInt() - 1);
					objOut = new ObjectOutputStream(new FileOutputStream("Persons.bin")); // clear the file
					for (Person p : persons) {
						objOut.writeObject(p);
					}
					System.out.println("Successfully removed." + person.toString());
					break;
				case 4:
					persons = readFile();
					displayPersons(persons);
					System.out.print("Choose an object to edit: ");
					int objectNo = sc.nextInt();
					System.out.println("Please enter updated information.");
					persons.set(objectNo - 1, inputPerson(sc));
					objOut = new ObjectOutputStream(new FileOutputStream("Persons.bin")); // clear the file
					for (Person p : persons) {
						objOut.writeObject(p);
					}
					System.out.println("Successfully updated.");
					break;
				case 5:
					System.out.println("Thank you for using the program!");
					break;
				default:
					System.out.println("Invalid input");
				}
			} while (choice != 5);
			objOut.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		sc.close();
	}

	/**
	 * Return a person object. It creates person object through user input of person
	 * attributes.
	 * 
	 * @param Scanner sc
	 * @return Person person
	 */
	public static Person inputPerson(Scanner sc) {
		String name, phone, email;

		System.out.print("Enter name: ");
		name = sc.next();
		System.out.print("Enter phone number: ");
		phone = sc.next();
		System.out.print("Enter email address: ");
		email = sc.next();

		do {
			System.out.print("Enter date of birth (yyyy-mm-dd): ");
			//exception handing for date of birth
			try {
				LocalDate dob = LocalDate.parse(sc.next());
				Person person = new Person(name, phone, dob, email);
				return person;
			} catch (DateTimeParseException e) {
				System.out.println("Incorrect format of date of birth.");
			}
		} while (true);
	}

	/**
	 * Deserialization Return person objects read from file in the form of
	 * ArrayList.
	 * 
	 * @return ArrayList<Person>
	 */
	public static ArrayList<Person> readFile() {
		ArrayList<Person> persons = new ArrayList<Person>();
		try {
			ObjectInputStream objIn = new ObjectInputStream(new FileInputStream("Persons.bin"));
			boolean flagEOF = true;
			while (flagEOF) {
				try {
					persons.add((Person) objIn.readObject());
				} catch (EOFException ex) {
					flagEOF = false;
				}
			}
			objIn.close();
		} catch (IOException e) {
			System.out.println("Nothing to read.");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return persons;
	}

	/**
	 * Display given ArrayList of person objects.
	 * 
	 * @param ArrayList<Person> persons
	 */
	private static void displayPersons(ArrayList<Person> persons) {
		int count = 0;
		for (Person p : persons) {
			count++;
			System.out.println(count + "-" + p.toString());
		}
	}
